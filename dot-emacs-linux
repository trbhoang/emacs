;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; general settings
(set-default-font "Monospace-9")
(menu-bar-mode  nil)                       ;; show the menu...
(mouse-avoidance-mode 'jump)             ;; mouse ptr when cursor is too close
(tool-bar-mode -1)                       ;; turn-off toolbar
(setq-default indent-tabs-mode nil)

(setq auto-save-default nil)             ;; disable auto save
(setq make-backup-files nil)             ;; disable creating backup files

(setq cua-enable-cua-keys nil)           ;; only for rectangles
(cua-mode t)

(setq ;; scrolling
  scroll-margin 0                        ;; do smooth scrolling, ...
  scroll-conservatively 100000           ;; ... the defaults ...
  scroll-up-aggressively 0               ;; ... are very ...
  scroll-down-aggressively 0             ;; ... annoying
  scroll-preserve-screen-position t)     ;; preserve screen pos with C-v/M-v 

(global-visual-line-mode 1)              ;; enable line wrapping
;; (global-linum-mode 1)                    ;; show line number

(toggle-scroll-bar nil)                  ;; hide scroll bar

(setq fringe-mode '(1 . 0))              ;; emacs 22+
(delete-selection-mode 1)                ;; delete the sel with a keyp

(setq x-select-enable-clipboard t        ;; copy-paste should work ...
  interprogram-paste-function            ;; ...with...
  'x-cut-buffer-or-selection-value)      ;; ...other X clients

(setq search-highlight t                 ;; highlight when searching... 
  query-replace-highlight t)             ;; ...and replacing
(fset 'yes-or-no-p 'y-or-n-p)            ;; enable y/n answers to yes/no 

(setq initial-scratch-message
  ";; scratch buffer created -- happy hacking\n")

(setq-default
 frame-title-format
 '(:eval
   (format "%s@%s:%s"
           (or (file-remote-p default-directory 'user) user-login-name)
           (or (file-remote-p default-directory 'host) system-name)
           (file-name-nondirectory (or (buffer-file-name) default-directory)))))

(put 'narrow-to-region 'disabled nil)    ;; enable...
(put 'erase-buffer 'disabled nil)        ;; ... useful things
(file-name-shadow-mode t)                ;; be smart about filenames in mbuf

(setq inhibit-startup-message t          ;; don't show ...    
  inhibit-startup-echo-area-message t)   ;; ... startup messages
(setq require-final-newline t)           ;; end files with a newline

;; slick-copy: make copy-past a bit more intelligent
;; from: http://www.emacswiki.org/emacs/SlickCopy
(defadvice kill-ring-save (before slick-copy activate compile)
  "When called interactively witand type RET to get full documentation.h no active region, copy a single
line instead."
  (interactive
    (if mark-active (list (region-beginning) (region-end))
      (message "Copied line")
      (list (line-beginning-position)
               (line-beginning-position 2)))))

(defadvice kill-region (before slick-cut activate compile)
  "When called interactively with no active region, kill a single
line instead."
  (interactive
    (if mark-active (list (region-beginning) (region-end))
      (list (line-beginning-position)
        (line-beginning-position 2)))))
        

;; key board / input method settings
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(set-language-environment "UTF-8")       ; prefer utf-8 for language settings
(set-input-method nil)                   ; no funky input for normal editing;
(setq read-quoted-char-radix 10)         ; use decimal, not octal

        
;; set spliting window horizontally by default
;; (setq split-height-threshold nil)
;; (setq split-width-threshold 0)

;; default directory
(setq default-directory "~/Projects/")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; the modeline
;; 
(line-number-mode t)                     ;; show line numbers
(column-number-mode t)                   ;; show column numbers
(size-indication-mode t)                 ;; show file size (emacs 22+)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(add-to-list 'load-path "~/.emacs.d")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; some handy packages
;;
;; dired-details
(require 'dired-details)
(dired-details-install)

;; dired-single
(require 'dired-single)

(defun my-dired-init ()
  "Bunch of stuff to run for dired, either immediately or when it's loaded."
  ;; <add other stuff here>
  (define-key dired-mode-map [return] 'dired-single-buffer)
  (define-key dired-mode-map [mouse-1] 'dired-single-buffer-mouse)
  (define-key dired-mode-map "^"
  (function
   (lambda nil (interactive) (dired-single-buffer "..")))))

;; if dired's already loaded, then the keymap will be bound
(if (boundp 'dired-mode-map)
  ;; we're good to go; just add our bindings
  (my-dired-init)
  ;; it's not loaded yet, so add our bindings to the load-hook
  (add-hook 'dired-load-hook 'my-dired-init))

;; hl-line: highlight the current line
(when (fboundp 'global-hl-line-mode)
  (global-hl-line-mode t)) ;; turn it on for all modes by default

;; yasnippet
;; (add-to-list 'load-path
;;                  "~/.emacs.d/yasnippet-0.6.1c")
;;    (require 'yasnippet) ;; not yasnippet-bundle
;;    (yas/initialize)
;;    (yas/load-directory "~/.emacs.d/yasnippet-0.6.1c/snippets")
(require 'yasnippet-bundle)

;; org mode
(add-to-list 'load-path "~/.emacs.d/org-mode/lisp")
(require 'org-install)
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
(setq org-agenda-files (list "~/Org/work.org"
                             "~/Org/school.org" 
                             "~/Document/Org/home.org"))

;; auto-complete mode
(add-to-list 'load-path "~/.emacs.d/")
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(ac-config-default)

;; Tabbar
(require 'tabbar)
(tabbar-mode)

;; Icicles Mode (minibuffer completion)
(add-to-list 'load-path "~/.emacs.d/icicles/")
(require 'icicles)
(icy-mode 1)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Programming languages

;; haml mode
(add-to-list 'load-path "~/.emacs.d/haml-mode")
(require 'haml-mode)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; My key bindings

;; switch to next window
(global-set-key "\M-`" 'other-window)

;; switch to next tabbar buffer
(global-set-key "\M-1" 'tabbar-forward-tab)

;; switch to next tabbar group
(global-set-key "\M-2" 'tabbar-forward-group)


;; sensitivelly adjust current window
(global-set-key [f10]
	(lambda ()
		(interactive)
		(let ((buf (window-buffer))
					(win (selected-window))
					(largest-win (get-largest-window)))
			(unless (equal win largest-win)
        (let* ((left (nth 0 (window-inside-pixel-edges largest-win)))
              (top (nth 1 (window-inside-pixel-edges largest-win)))
              (right (nth 2 (window-inside-pixel-edges largest-win)))
              (bottom (nth 3 (window-inside-pixel-edges largest-win)))
              (width (- right left))
              (height (- bottom top)))
				(if (> width height)
						(progn
						(select-window (split-window largest-win nil t)))     ;; split horizontally
					(progn
						(select-window (split-window largest-win nil nil))))  ;; split vertically
        (set-window-buffer (selected-window) buf)
        (delete-window win))))))

;; toggle scroll bar
(global-set-key [f11]
  (lambda ()
    (interactive)
    (if (null (car (frame-current-scroll-bars)))
      (toggle-scroll-bar t)
      (toggle-scroll-bar nil))))

;; ==========================================================
;; delete a whole line
;; ==========================================================

;; ===== Function to delete a line =====

;; First define a variable which will store the previous column position
(defvar previous-column nil "Save the column position")

;; Define the nuke-line function. The line is killed, then the newline
;; character is deleted. The column which the cursor was positioned at is then
;; restored. Because the kill-line function is used, the contents deleted can
;; be later restored by usibackward-delete-char-untabifyng the yank commands.
(defun nuke-line()
  "Kill an entire line, including the trailing newline character"
  (interactive)

  ;; Store the current column position, so it can later be restored for a more
  ;; natural feel to the deletion
  (setq previous-column (current-column))

  ;; Now move to the end of the current line
  (end-of-line)

  ;; Test the length of the line. If it is 0, there is no need for a
  ;; kill-line. All that happens in this case is that the new-line character
  ;; is deleted.
  (if (= (current-column) 0)
    (delete-char 1)

    ;; This is the 'else' clause. The current line being deleted is not zero
    ;; in length. First remove the line by moving to its start and then
    ;; killing, followed by deletion of the newline character, and then
    ;; finally restoration of the column position.
    (progn
      (beginning-of-line)
      (kill-line)
      (delete-char 1)
      (move-to-column previous-column))))

;; Now bind the delete line function
(global-set-key (kbd "C-;") 'nuke-line)

;; ==========================================================

(global-set-key [f12] 'quit-window)
      
(global-set-key (kbd "RET")         'newline-and-indent)
(global-set-key (kbd "C-<f4>")      'kill-buffer-and-window)
(global-set-key (kbd "<delete>")    'delete-char)  ; delete == delete    
(global-set-key (kbd "M-g")         'goto-line)    ; M-g  'goto-line
      
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; programming
(autoload 'linum-mode "linum" "mode for line numbers" t) 
(global-set-key (kbd "C-<f5>") 'linum-mode)                 ;; line numbers

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; productivity stuff; f9-f12 
(global-set-key (kbd "C-c l") 'org-store-link)  ;; Links
(global-set-key (kbd "C-c a") 'org-agenda)      ;; Agenda
(global-set-key (kbd "C-c b") 'org-iswitchb)    ;; switch
(global-set-key (kbd "<f5>")  'wl)              ;; Wanderlust
(global-set-key (kbd "<f6>")  'org-agenda-list) ;; Agenda
(global-set-key (kbd "<f7>")  'org-todo-list)   ;; todo-list (NextActions)
(global-set-key (kbd "<f8>")  'remember)        ;; remember

(global-set-key (kbd "C-c W") ;; wanderlust
  (lambda()(interactive)(find-file wl-init-file))) 



;; program shortcuts
(defun .emacs ()
  (interactive)
  (find-file "~/.emacs"))

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(tab-width 2))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; my rails project browser
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq my-rails-project "~/Projects/AdobeSPLC/adobe_splc/")
(setq my-rails-project-app (concat my-rails-project "app/"))
(setq my-rails-project-controllers (concat my-rails-project "app/controllers/"))
(setq my-rails-project-views (concat my-rails-project "app/views/"))
(setq my-rails-project-models (concat my-rails-project "app/models/"))
(setq my-rails-project-config (concat my-rails-project "config/"))
(setq my-rails-project-db (concat my-rails-project "db/"))
(setq my-rails-project-migrations (concat my-rails-project "db/migrate/"))
(setq my-rails-project-javascripts (concat my-rails-project "public/javascripts"))
(setq my-rails-project-stylesheets (concat my-rails-project "public/stylesheets"))

;; dired my project
(defun rproject ()
	(interactive)
	(setq default-directory my-rails-project)
	(call-interactively 'find-file))

;; dired my app
(defun rapp ()
	(interactive)
	(setq default-directory my-rails-project-app)
	(call-interactively 'find-file))

;; dired my controller
(defun rcontrollers ()
	(interactive)
	(setq default-directory my-rails-project-controllers)
	(call-interactively 'find-file))

;; dired my views
(defun rviews ()
	(interactive)
	(setq default-directory my-rails-project-views)
	(call-interactively 'find-file))

;; dired my models
(defun rmodels ()
	(interactive)
	(setq default-directory my-rails-project-models)
	(call-interactively 'find-file))

;; dired my config
(defun rconfig ()
	(interactive)
	(setq default-directory my-rails-project-config)
	(call-interactively 'find-file))

;; dired my db
(defun rdb ()
	(interactive)
	(setq default-directory my-rails-project-db)
	(call-interactively 'find-file))

;; dired my migrations
(defun rmigrations ()
	(interactive)
	(setq default-directory my-rails-project-migrations)
	(call-interactively 'find-file))

;; dired my javascripts
(defun rjavascripts ()
	(interactive)
	(setq default-directory my-rails-project-javascripts)
	(call-interactively 'find-file))

;; dired my stylesheets
(defun rstylesheets ()
	(interactive)
	(setq default-directory my-rails-project-stylesheets)
	(call-interactively 'find-file))

